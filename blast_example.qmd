# A worked example

```{r setup, include=FALSE}
library(tidyverse)
library(patchwork)
library(WienR)

set.seed(12222)

source("wienr_fit_utils.r")
```

This chapter presents a complete worked example of applying the diffusion model to a two-choice task.  The data for this example were reported originally by @TruebloodEtAl2018.  

```{r out.width = "100%"}
knitr::include_graphics("img/blast_example_stimuli.png")
```

```{r}
#| code-fold: show

download.file("https://github.com/gregcox7/choice_rt_models/raw/refs/heads/main/data/blast_data.rdata", "blast_data.rdata")
load("blast_data.rdata")
```

```{r}
#| code-fold: show

glimpse(blast_data)
```

```{r}
#| code-fold: show

blast_data <- blast_data %>%
    mutate(
        drift_index = as.numeric(interaction(difficulty, correct_response, drop = TRUE)),
        bound_index = as.numeric(blockType),
        resid_index = as.numeric(blockType),
        sv_index = 1,
        st0_index = 1
    )

blast_data_subj <- blast_data %>%
    filter(group == "Inexperienced", subject == "M003")
```

```{r eval = FALSE}
#| code-fold: show

fit_subj <- fit_wienr(
    rt = blast_data_subj$rt,
    response = (blast_data_subj$response == "Blast") + 1,
    fit_sv = T, fit_sw = F, fit_st0 = T,
    # optim_control = list(trace = 1),
    drift_index = blast_data_subj$drift_index,
    bound_index = blast_data_subj$bound_index,
    resid_index = blast_data_subj$resid_index,
    sv_index = blast_data_subj$sv_index,
    st0_index = blast_data_subj$st0_index
)
```

```{r eval = FALSE}
library(modelr)

to_fit <- blast_data %>%
    data_grid(nesting(group, subject))

if (file.exists("blast_fits.rdata")) {
    load("blast_fits.rdata")
} else {
    model_pars <- c()
    model_qp <- c()
    
    pb <- txtProgressBar(min = 0, max = nrow(to_fit), initial = 0, style = 3)
    
    for (fit_index in 1:nrow(to_fit)) {
        this_subj_data <- semi_join(blast_data, to_fit[fit_index,])
        
        this_fit <- fit_wienr(
            rt = this_subj_data$rt,
            response = (this_subj_data$response == "Blast") + 1,
            fit_sv = T, fit_sw = F, fit_st0 = T,
            drift_index = this_subj_data$drift_index,
            bound_index = this_subj_data$bound_index,
            resid_index = this_subj_data$resid_index,
            sv_index = this_subj_data$sv_index,
            st0_index = this_subj_data$st0_index
        )
        
        model_pars <- rbind(
            model_pars,
            cbind(to_fit[fit_index,], tibble(par_name = names(this_fit$par), val = this_fit$par) %>% extract(par_name, into = c("par", "index"), regex = "(.+)\\[(.+)\\]"))
        )
        
        this_qp <- qp_fit(
            rt = this_subj_data$rt,
            response = (this_subj_data$response == "Blast") + 1,
            par = this_fit$par,
            drift_index = this_subj_data$drift_index,
            bound_index = this_subj_data$bound_index,
            resid_index = this_subj_data$resid_index,
            sv_index = this_subj_data$sv_index,
            st0_index = this_subj_data$st0_index
        )
        
        model_qp <- rbind(
            model_qp,
            cbind(to_fit[fit_index,], this_qp)
        )
        
        setTxtProgressBar(pb, fit_index)
    }
    
    close(pb)
    
    save(model_pars, model_qp, file = "blast_fits.rdata")
}

model_pars %>%
    ggplot(aes(x = index, y = val, color = group, shape = group)) +
    geom_point(position = position_jitterdodge(jitter.width = 0.1, dodge.width = 0.4), alpha = 0.5, size = 0.5) +
    stat_summary(geom = "pointrange", fun.data = mean_cl_boot, position = position_dodge(width = 0.4)) +
    facet_wrap("par", scales = "free")

model_qp %>%
    mutate(
        blockType = factor(bound_index, labels = levels(blast_data$blockType)),
        item_type = factor(drift_index, labels = levels(interaction(blast_data$difficulty, blast_data$correct_response, sep = " ", drop = T)))
    ) %>%
    group_by(blockType, item_type, response, source, rt_p) %>%
    summarize(rt_q = mean(rt_q, na.rm = TRUE), p_resp = mean(p_resp, na.rm = TRUE)) %>%
    ggplot(aes(x = p_resp, y = rt_q, color = item_type)) +
    geom_point(aes(shape = source)) +
    geom_line(aes(linetype = source, group = interaction(item_type, rt_p, source))) +
    facet_wrap("blockType")
```
